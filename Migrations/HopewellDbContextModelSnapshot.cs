// <auto-generated />
using System;
using HopewellClinicApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HopewellClinicApi.Migrations
{
    [DbContext(typeof(HopewellDbContext))]
    partial class HopewellDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HopewellClinicApi.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655449001"),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655449002"),
                            Name = "doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655449003"),
                            Name = "nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655449004"),
                            Name = "patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("HopewellClinicApi.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655441001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2012b59e-3df5-442e-a72f-ef7e34c3dbf6",
                            CreatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 818, DateTimeKind.Utc).AddTicks(2180),
                            Email = "nomsa.mandela@hopewell.com",
                            EmailConfirmed = true,
                            FirstName = "Dr. Nomsa",
                            IsActive = true,
                            LastName = "Mandela",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOMSA.MANDELA@HOPEWELL.COM",
                            NormalizedUserName = "NOMSA.MANDELA@HOPEWELL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBLC+82KkL8Zl2E1f4aXkXwzWf6a/b8b/eXwzWf6a/b8b/eXwzWf6a/b8b/eQ==",
                            PhoneNumber = "+27123456789",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 818, DateTimeKind.Utc).AddTicks(2188),
                            UserName = "nomsa.mandela@hopewell.com"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655441003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69cb8011-894f-4010-89e6-55cd9e8fd596",
                            CreatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 819, DateTimeKind.Utc).AddTicks(5595),
                            Email = "thabo.sithole@hopewell.com",
                            EmailConfirmed = true,
                            FirstName = "Dr. Thabo",
                            IsActive = true,
                            LastName = "Sithole",
                            LockoutEnabled = false,
                            NormalizedEmail = "THABO.SITHOLE@HOPEWELL.COM",
                            NormalizedUserName = "THABO.SITHOLE@HOPEWELL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBLC+82KkL8Zl2E1f4aXkXwzWf6a/b8b/eXwzWf6a/b8b/eXwzWf6a/b8b/eQ==",
                            PhoneNumber = "+27123456790",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 819, DateTimeKind.Utc).AddTicks(5600),
                            UserName = "thabo.sithole@hopewell.com"
                        });
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointment_date");

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("booking_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("patient_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("service_id");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("emergency_contact_phone");

                    b.Property<string>("PatientNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("patient_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PatientNumber")
                        .IsUnique()
                        .HasFilter("[patient_number] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            CreatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 820, DateTimeKind.Utc).AddTicks(1702),
                            Description = "General medical consultation and examination",
                            DurationMinutes = 30,
                            IsActive = true,
                            Name = "General Consultation",
                            UpdatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 820, DateTimeKind.Utc).AddTicks(1704)
                        });
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("StaffNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("staff_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("StaffNumber")
                        .IsUnique()
                        .HasFilter("[staff_number] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655441000"),
                            CreatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 820, DateTimeKind.Utc).AddTicks(4051),
                            IsActive = true,
                            StaffNumber = "DOC001",
                            UpdatedAt = new DateTime(2025, 8, 20, 21, 39, 7, 820, DateTimeKind.Utc).AddTicks(4053),
                            UserId = new Guid("550e8400-e29b-41d4-a716-446655441001")
                        });
                });

            modelBuilder.Entity("HopewellClinicApi.Models.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("time_slots");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("550e8400-e29b-41d4-a716-446655441001"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655449002")
                        },
                        new
                        {
                            UserId = new Guid("550e8400-e29b-41d4-a716-446655441003"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655449002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Appointment", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HopewellClinicApi.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HopewellClinicApi.Models.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Patient");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Patient", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", "User")
                        .WithOne("Patient")
                        .HasForeignKey("HopewellClinicApi.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Staff", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("HopewellClinicApi.Models.Staff", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HopewellClinicApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HopewellClinicApi.Models.ApplicationUser", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HopewellClinicApi.Models.Staff", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
